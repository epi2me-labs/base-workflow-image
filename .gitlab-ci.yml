
stages:
    - build
    - release

image: ${IMAGE}

##
# Build the image, push to project registry if on dev branch
build:
    stage: build
    script:
        - echo ${CI_BUILD_TOKEN} | docker login --username gitlab-ci-token --password-stdin ${CI_REGISTRY}
        - TAG=${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}
        - docker build --no-cache -t "${TAG}" -f Dockerfile .
        - if [[ ${CI_COMMIT_BRANCH} == 'dev' ]]; then
              SHATAG=${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA};
              echo "Pushing ${SHATAG}";
              docker tag ${TAG} ${SHATAG};
              docker push ${SHATAG};
          fi;
    only:
        - branches


###
# Retag the image for git tags (releases)

.pull_tag: &pull_tag
    before_script:
        - echo ${CI_BUILD_TOKEN} | docker login --username gitlab-ci-token --password-stdin ${CI_REGISTRY}
        - SHATAG=${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
        - echo "Pulling ${SHATAG}"
        - docker pull ${SHATAG}
    only:
        - tags

# To ONT registry
release-int:
    stage: release
    <<: *pull_tag
    script:
        - echo ${CI_BUILD_TOKEN} | docker login --username gitlab-ci-token --password-stdin ${CI_REGISTRY}
        - RELTAG=${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}
        - echo "Pushing ${TAG}"
        - docker tag ${SHATAG} ${RELTAG}
        - docker push ${RELTAG}

# To dockerhub
release-hub:
    stage: release
    <<: *pull_tag
    script:
        - echo ${DOCKERHUB_TOKEN} | docker login --username epi2melabs --password-stdin
        - RELTAG=ontresearch/${CI_PROJECT_NAME}:${CI_COMMIT_TAG}
        - echo "Pushing ${RELTAG}"
        - docker tag ${SHATAG} ${RELTAG}
        - docker push ${RELTAG}
